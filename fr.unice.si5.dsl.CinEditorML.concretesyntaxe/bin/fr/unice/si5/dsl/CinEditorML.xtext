// automatically generated by Xtext
grammar fr.unice.si5.dsl.CinEditorML with org.eclipse.xtext.common.Terminals

import "http://www.example.org/CinEditorML" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Video returns Video:
	'Video' name=EString ':'
		'clips' ':' clips+=Clip (clips+=Clip)*
		'pistes' ':' pistes+=Piste (pistes+=Piste)*;

Clip returns Clip:
	VideoClip | TextClip ;
	
enum From returns From:
	BEGIN = "BEGIN" | END = "END";
	
enum TransitionFade returns TransitionFade:
	crossfadein = "crossfadein" | crossfadeout = "crossfadeout";
	
enum TransitionSlide returns TransitionSlide:
	slide_in = "slide_in" | slide_out = "slide_out";

	
enum Operator returns Operator:
				MINUS = '-' | PLUS = '+';
	
ClipDelay returns ClipDelay:
	{ClipDelay}
	from=From
	clip=[Clip|EString]
	(operator=Operator
	delay=EInt)?
	;


Piste returns Piste:
	SubtitlePiste | VideoPiste | MiniaturePiste;
	
SubtitlePiste returns SubtitlePiste:
	{SubtitlePiste}
	'SubtitlePiste'
	name=EString ':'
	subtitles+=Subtitle
	(subtitles+=Subtitle)*
;

VideoPiste returns VideoPiste:
	{VideoPiste}
	'VideoPiste'
	name=EString ':'
	clips+=[Clip|EString]
	( '->' clips+=[Clip|EString])*
;

MiniaturePiste returns MiniaturePiste:
	{MiniaturePiste}
	'MiniaturePiste'
	name=EString ':'
	miniatures+=Miniature
	(miniatures+=Miniature)*
;


EString returns ecore::EString:
	STRING | ID;


Text returns Text:
	Subtitle | TextClip;

VideoClip returns VideoClip:
	{VideoClip} 'VideoClip' name=EString "->" source=EString borne=SimpleBorne ('position=('position_hori=EString', 'position_vert=EString')')? ('transition=('transition=TransitionVideo')')? ('resize=('resize=Resize')')? ;
	
Miniature returns Miniature:
	{Miniature} videoclip=[VideoClip|EString] borne=Borne
;

Resize returns Resize:
	{Resize} 'height='height=EInt', ' 'width='width=EInt
;
	
TextClip returns TextClip:
	{TextClip} 
	'TextClip' 
	name=EString 
	"->" 
	text=EString 
	'duration='duration=EInt
	('bg_color='bg_color=EString)?
	('color='color=EString)?
	('fontsize='fontsize=EInt)?
	('position=('position_hori=EString','position_vert=EString')')?
	;

Subtitle returns Subtitle:
	{Subtitle}
	'Subtitle'
	name=EString
	"->"
	text=EString
	borne=Borne
	('color='color=EString)?
	('fontsize='fontsize=EInt)?
	;
	
Borne returns Borne:
	SimpleBorne | DurationBorne | ClipTimeBorne | TimeClipBorne | ClipBorne;

SimpleBorne returns SimpleBorne:
	{SimpleBorne} "["time_start=EInt "to" time_end=EInt"]";

DurationBorne returns DurationBorne:
	{DurationBorne} "["time_start=EInt "for" duration=EInt"]";

ClipTimeBorne returns ClipTimeBorne:
	{ClipTimeBorne} "["clip_start=ClipDelay "for" duration=EInt"]";
	
TimeClipBorne returns TimeClipBorne:
	{TimeClipBorne} "["duration=EInt "to" clip_end=ClipDelay "]";

ClipBorne returns ClipBorne:
	{ClipBorne} "["clip_start=ClipDelay "to" clip_end=ClipDelay"]";
	
	
TransitionVideo returns TransitionVideo:
	TransitionFadeVideo | TransitionSlideVideo;

TransitionSlideVideo returns TransitionSlideVideo:
	{TransitionSlideVideo}
	'type='type=TransitionSlide', ' 'duration='duration=EInt', ' 'position='position=EString
;

TransitionFadeVideo returns TransitionFadeVideo:
	{TransitionFadeVideo}
	'type='type=TransitionFade', ' 'duration='duration=EInt
;

EInt returns ecore::EInt:
	'-'? INT;
