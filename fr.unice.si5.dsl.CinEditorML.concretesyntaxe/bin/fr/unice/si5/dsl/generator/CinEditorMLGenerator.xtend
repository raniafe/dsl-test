/*
 * generated by Xtext 2.14.0
 */
package fr.unice.si5.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.unice.si5.dsl.CinEditorML.Video
import fr.unice.si5.dsl.CinEditorML.Clip
import fr.unice.si5.dsl.CinEditorML.VideoClip
import fr.unice.si5.dsl.CinEditorML.TextClip
import fr.unice.si5.dsl.CinEditorML.Borne
import fr.unice.si5.dsl.CinEditorML.SimpleBorne
import fr.unice.si5.dsl.CinEditorML.DurationBorne
import fr.unice.si5.dsl.CinEditorML.ClipTimeBorne
import fr.unice.si5.dsl.CinEditorML.TimeClipBorne
import fr.unice.si5.dsl.CinEditorML.ClipBorne
import fr.unice.si5.dsl.CinEditorML.Piste
import fr.unice.si5.dsl.CinEditorML.VideoPiste
import fr.unice.si5.dsl.CinEditorML.SubtitlePiste
import fr.unice.si5.dsl.CinEditorML.Subtitle

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CinEditorMLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var Object root = resource.contents.get(0);
		if (! (root instanceof Video)){
			return
		}
		var Video app = root as Video
		fsa.generateFile(app.name+'.py', compile(app))
	}
			
	def compile(Video app) '''
		//Wiring code generated from an CinEditorML model
		// Video name: «app.name»"
		from moviepy.editor import *
		from moviepy.config import change_settings
		from moviepy.video.tools.subtitles import SubtitlesClip
		change_settings({"IMAGEMAGICK_BINARY": "C:\Program Files\ImageMagick-7.0.10-Q16-HDRI\magick.exe"})
		screensize = (720, 460)
		composite_durations = []
		«FOR Clip clip: app.clips»
			«compile(clip)»
		«ENDFOR»
		«FOR Piste piste: app.pistes»
			«IF piste instanceof SubtitlePiste»
				«declare(piste as SubtitlePiste)»
			«ENDIF»
		«ENDFOR»
		«FOR Piste piste: app.pistes»
			«compile(piste)»
		«ENDFOR»
	'''
	def compile(Clip c) '''
		«IF c instanceof VideoClip»
			«compile(c as VideoClip)»
		«ENDIF»
		«IF c instanceof TextClip»
			«compile(c as TextClip)»
		«ENDIF»
	'''
	
	def compile(TextClip c) '''
		«c.name» = TextClip("«c.text»",
		«IF c.bg_color !== null»
			bg_color='«c.bg_color»',
		«ENDIF»
		«IF c.fontsize !== 0»
			fontsize='«c.fontsize»',
		«ENDIF»
		«IF c.color !== null»
			color='«c.color»',
		«ENDIF»
		)
		«IF c.position_hori !== null»
			.set_position(['«c.position_hori»',
		«ENDIF»
		«IF c.position_vert !== null»
			'«c.position_vert»'])
		«ENDIF»
		.set_duration(«c.duration»)
	'''
	def compile(VideoClip c) '''
		«c.name» = VideoFileClip("./«c.source»").subclip(«compile(c.borne)»)
		«IF c.position_hori !== null»
			.set_position(['«c.position_hori»',
		«ENDIF»
		«IF c.position_vert !== null»
			'«c.position_vert»'])
		«ENDIF»
	'''
	def compile(Borne b) '''
		«IF b instanceof SimpleBorne»
			«compile(b as SimpleBorne)»
		«ENDIF»
		«IF b instanceof DurationBorne»
			«compile(b as DurationBorne)»
		«ENDIF»
		«IF b instanceof ClipTimeBorne»
			«compile(b as ClipTimeBorne)»
		«ENDIF»
		«IF b instanceof TimeClipBorne»
			«compile(b as TimeClipBorne)»
		«ENDIF»
		«IF b instanceof ClipBorne»
			«compile(b as ClipBorne)»
		«ENDIF»
	'''
	
	def compile(SimpleBorne b) '''
		«b.time_start»,«b.time_end»
	'''
	
	def compile(DurationBorne b) '''
		«b.time_start»,«b.time_start + b.duration»
	'''
	
	def compile(ClipTimeBorne b) '''
		«b.clip_start.clip.name».duration()
	'''
	
	def compile(TimeClipBorne b) '''
		
	'''
	
	def compile(ClipBorne b) '''
		
	'''
	
	def compile(Piste p) '''
		«IF p instanceof VideoPiste»
			«compile(p as VideoPiste)»
		«ENDIF»
		«IF p instanceof SubtitlePiste»
			«compile(p as SubtitlePiste)»
		«ENDIF»
	'''
	
	def compile(VideoPiste v)'''
		«var i = 0»
		«FOR Clip clip: v.clips»
			«IF i == 0»
				«clip.name»,
			«ENDIF»
			«IF i !== 0»
				«clip.name».set_start(«v.clips.get(i-1)»),
			«ENDIF»
			«i = i+1»
		«ENDFOR»

	'''
	
	def compile(SubtitlePiste s)'''
		

	'''
	
	def declare(SubtitlePiste s)'''
		subs = [(
		«FOR Subtitle sub: s.subtitles»
			((«compile(sub.borne)»), '«sub.text»'),
		«ENDFOR»
		        ]
		subtitles = SubtitlesClip(subs).set_position(['center', 'bottom'])
	'''
	
}
